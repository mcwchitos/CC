
// ==========================================================================
//  GPPG error listing for yacc source file <ToyLang.Language.grammar.y - 10/10/2019 10:24:55 PM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  HUY001
//  DateTime: 10/10/2019 10:41:29 PM
//  UserName: huy
// ==========================================================================


%namespace CCAss3
%partial
%parsertype ToyLangParser
%visibility internal
%tokentype Token

%union { 
			public int n; 
			public string s; 
	   }

// Identifiers & numbers
%token IDENTIFIER;
//--------------^^
// Error: Bad separator character in list
// --------------------------------------
%token NUMBER;
//----------^^
// Error: Bad separator character in list
// --------------------------------------

// Keywords
%token IMPORT;
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token CLASS;
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token EXTENDS;
//-----------^^
// Error: Bad separator character in list
// --------------------------------------
%token PRIVATE;
//-----------^^
// Error: Bad separator character in list
// --------------------------------------
%token PUBLIC;
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token STATIC;
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token VOID;
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token IF;
//------^^
// Error: Bad separator character in list
// --------------------------------------
%token ELSE;
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token WHILE;
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token LOOP;
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token RETURN;
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token PRINT;
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token NULL;
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token NEW;
//-------^^
// Error: Bad separator character in list
// --------------------------------------
%token INT;
//-------^^
// Error: Bad separator character in list
// --------------------------------------
%token REAL;
//--------^^
// Error: Bad separator character in list
// --------------------------------------
// Delimiters

%token LBRACE;     //  {
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token RBRACE;    //  }
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token LPAREN;     //  (
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token RPAREN;      //  )
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token LBRACKET;    //  [
//------------^^
// Error: Bad separator character in list
// --------------------------------------
%token RBRACKET;    //  ]
//------------^^
// Error: Bad separator character in list
// --------------------------------------
%token COMMA;       //  ,
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token DOT;         //  .
//-------^^
// Error: Bad separator character in list
// --------------------------------------
%token SEMICOLON;   //  ;
//-------------^^
// Error: Bad separator character in list
// --------------------------------------

// Operator signs
%token ASSIGN;      //  =
//----------^^
// Error: Bad separator character in list
// --------------------------------------
%token LESS;        //  <
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token GREATER;     //  >
//-----------^^
// Error: Bad separator character in list
// --------------------------------------
%token EQUAL;       //  ==
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token NOT_EQUAL;   //  !=
//-------------^^
// Error: Bad separator character in list
// --------------------------------------
%token PLUS;        //  +
//--------^^
// Error: Bad separator character in list
// --------------------------------------
%token MINUS;       //  -
//---------^^
// Error: Bad separator character in list
// --------------------------------------
%token MULTIPLY;    //  *
//------------^^
// Error: Bad separator character in list
// --------------------------------------
%token DIVIDE;      //  /
//----------^^
// Error: Bad separator character in list
// --------------------------------------

%start CompilationUnit

%%
CompilationUnit
       : Imports ClassDeclarations
       ;

Imports
       :  /* empty */
       | Import Imports
       ;

Import
       : IMPORT IDENTIFIER SEMICOLON
       ;

ClassDeclarations
       : /* empty */
       | ClassDeclaration ClassDeclarations
       ;

ClassDeclaration
       : CLASS CompoundName Extension SEMICOLON ClassBody
       | PUBLIC CLASS CompoundName Extension SEMICOLON ClassBody
       ;

Extension
       : /* empty */
       | EXTENDS IDENTIFIER
       ;

ClassBody
       : LBRACE              RBRACE
       | LBRACE ClassMembers RBRACE
       ;

ClassMembers
       :              ClassMember
       | ClassMembers ClassMember
       ;

ClassMember
       : FieldDeclaration
       | MethodDeclaration
       ;

FieldDeclaration
       : Visibility Staticness Type IDENTIFIER SEMICOLON
       ;

Visibility
       : /* empty */
       | PRIVATE
       | PUBLIC
       ;

Staticness
       : /* empty */
       | STATIC
       ;

MethodDeclaration
       : Visibility Staticness MethodType IDENTIFIER Parameters
            Body
       ;

Parameters
       : LPAREN               RPAREN
       | LPAREN ParameterList RPAREN
       ;

ParameterList
       :                     Parameter
       | ParameterList COMMA Parameter
       ;

Parameter
       : Type IDENTIFIER
       ;

MethodType
       : Type
       | VOID
       ;

Body
       : LBRACE LocalDeclarations Statements RBRACE
       ;

LocalDeclarations
       :                   LocalDeclaration
       | LocalDeclarations LocalDeclaration
       ;

LocalDeclaration
       : Type IDENTIFIER SEMICOLON
       ;

Statements
       :            Statement
       | Statements Statement
       ;

Statement
       : Assignment
       | IfStatement
       | WhileStatement
       | ReturnStatement
       | CallStatement
       | PrintStatement
       | Block
       ;

Assignment
       : LeftPart ASSIGN Expression SEMICOLON
       ;

LeftPart
       : CompoundName
       | CompoundName LBRACKET Expression RBRACKET
       ;

CompoundName
       :                  IDENTIFIER
       | CompoundName DOT IDENTIFIER
       ;

IfStatement
       : IF LPAREN Relation RPAREN Statement
       | IF LPAREN Relation RPAREN Statement ELSE Statement
       ;

WhileStatement
       : WHILE Relation LOOP Statement SEMICOLON
       ;

ReturnStatement
       : RETURN            SEMICOLON
       | RETURN Expression SEMICOLON
       ;

CallStatement
       : CompoundName LPAREN              RPAREN SEMICOLON
       | CompoundName LPAREN ArgumentList RPAREN SEMICOLON
       ;

ArgumentList
       :                    Expression
       | ArgumentList COMMA Expression
       ;

PrintStatement
       : PRINT Expression SEMICOLON
       ;

Block
       : LBRACE            RBRACE
       | LBRACE Statements RBRACE
       ;

Relation
       : Expression
       | Expression RelationalOperator Expression
       ;

RelationalOperator
       : LESS
       | GREATER
       | EQUAL
       | NOT_EQUAL
       ;

Expression
       :         Term Terms
       | AddSign Term Terms
       ;

AddSign
       : PLUS
       | MINUS
       ;

Terms
       : /* empty */
       | AddSign Term Terms
       ;

Term
       : Factor Factors
       ;

Factors
       : /* empty */
       | MultSign Factor Factors
       ;

MultSign
       : MULTIPLY
       | DIVIDE
       ;

Factor
       : NUMBER
       | LeftPart
       | NULL
       | NEW NewType
       | NEW NewType LBRACKET Expression RBRACKET
       ;

NewType
       : INT
       | REAL
       | IDENTIFIER
       ;

Type
       : INT        ArrayTail
       | REAL       ArrayTail
       | IDENTIFIER ArrayTail
       ;

ArrayTail
       : /* empty */
       | LBRACKET RBRACKET
       ;

%%

// ==========================================================================

