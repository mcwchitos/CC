
// ==========================================================================
//  GPLEX error listing for lex source file <ToyLang.Language.analyzer.lex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  ORISHDESKTOP
//  DateTime: 05.12.2019 23:15:09
//  UserName: richr
// ==========================================================================


%namespace CCAss3
%scannertype ToyLangScanner
%visibility internal
%tokentype Token

%option stack, minimize, parser, verbose, persistbuffer, noembedbuffers 

Eol             (\r\n?|\n)
NotWh           [^ \t\r\n]
Space           [ \t]

%{

%}

%%

/* Scanner body */

{Space}+		/* skip */
{Eol}+		/* skip */
//^^^^
// Warning: This pattern always overrides "[ \t\n]" 
// -------------------------------------------------


[ \t\n]                 /* skip */
//^^^^^
// Warning: This pattern always overridden by "{Eol}+" 
// ----------------------------------------------------



"class"                 {return (int)Token.CLASS;}
"extends"               {return (int)Token.EXTENDS;}
"if"                    {return (int)Token.IF;}
"else"                  {return (int)Token.ELSE;}
"is"                    {return (int)Token.IS;}
"end"                   {return (int)Token.END;}
"this"                  {return (int)Token.THIS;}
"then"                  {return (int)Token.THEN;}
"while"                 {return (int)Token.WHILE;}
"loop"                  {return (int)Token.LOOP;}
"return"                {return (int)Token.RETURN;}
"true"                  {return (int)Token.TRUE;}
"false"                 {return (int)Token.FALSE;}
"method"                {return (int)Token.METHOD;}
"var"                   {return (int)Token.VAR;}



[a-zA-Z_][a-zA-Z0-9_]*  {GetIdentifier(); return (int)Token.IDENTIFIER;}
[0-9]*	                {GetNumber(); return (int)Token.NUMBER;}
":="                    {return (int)Token.ASSIGN;}
"("                     {return (int)Token.LPAREN;}
")"                     {return (int)Token.RPAREN;}
"["                     {return (int)Token.LBRACKET;}
"]"                     {return (int)Token.RBRACKET;}
"{"                     {return (int)Token.LBRACE;}
"}"                     {return (int)Token.RBRACE;}
"."                     {return (int)Token.DOT;}
","                     {return (int)Token.COMMA;}
":"                     {return (int)Token.COLON;}

.                       {Console.WriteLine("error"); yyerror("PIZDEC");}
%%// ==========================================================================

