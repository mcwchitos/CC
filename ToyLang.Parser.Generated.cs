// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  HUY001
// DateTime: 10/11/2019 2:32:39 PM
// UserName: huy
// Input file <ToyLang.Language.grammar.y - 10/11/2019 2:32:38 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CCAss3
{
internal enum Token {error=2,EOF=3,IDENTIFIER=4,NUMBER=5,IMPORT=6,
    CLASS=7,EXTENDS=8,PRIVATE=9,PUBLIC=10,STATIC=11,VOID=12,
    IF=13,ELSE=14,WHILE=15,LOOP=16,RETURN=17,PRINT=18,
    NULL=19,NEW=20,INT=21,REAL=22,LBRACE=23,RBRACE=24,
    LPAREN=25,RPAREN=26,LBRACKET=27,RBRACKET=28,COMMA=29,DOT=30,
    SEMICOLON=31,ASSIGN=32,LESS=33,GREATER=34,EQUAL=35,NOT_EQUAL=36,
    PLUS=37,MINUS=38,MULTIPLY=39,DIVIDE=40};

internal partial struct ValueType
{ 
			public int intNumber;
			public double realNumber;
			public string identifier; 
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class ToyLangParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ToyLang.Language.grammar.y - 10/11/2019 2:32:38 PM
       public RootNode Root = new RootNode();
  // End verbatim content from ToyLang.Language.grammar.y - 10/11/2019 2:32:38 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[92];
  private static State[] states = new State[161];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "Imports", "ClassDeclarations", "Import", 
      "ClassDeclaration", "CompoundName", "Extension", "ClassBody", "ClassMembers", 
      "ClassMember", "FieldDeclaration", "MethodDeclaration", "Visibility", "Staticness", 
      "Type", "MethodType", "Parameters", "Body", "ParameterList", "Parameter", 
      "LocalDeclarations", "Statements", "LocalDeclaration", "Statement", "Assignment", 
      "IfStatement", "WhileStatement", "ReturnStatement", "CallStatement", "PrintStatement", 
      "Block", "LeftPart", "Expression", "Relation", "ArgumentList", "RelationalOperator", 
      "Term", "Terms", "AddSign", "Factor", "Factors", "MultSign", "NewType", 
      "ArrayTail", };

  static ToyLangParser() {
    states[0] = new State(new int[]{6,158,7,-3,10,-3,3,-3},new int[]{-1,1,-3,3,-5,156});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{7,7,10,150,3,-6},new int[]{-4,4,-6,5});
    states[4] = new State(-2);
    states[5] = new State(new int[]{7,7,10,150,3,-6},new int[]{-4,6,-6,5});
    states[6] = new State(-7);
    states[7] = new State(new int[]{4,59},new int[]{-7,8});
    states[8] = new State(new int[]{30,54,8,148,31,-10},new int[]{-8,9});
    states[9] = new State(new int[]{31,10});
    states[10] = new State(new int[]{23,12},new int[]{-9,11});
    states[11] = new State(-8);
    states[12] = new State(new int[]{24,13,9,144,10,145,11,-19,21,-19,22,-19,4,-19,12,-19},new int[]{-10,14,-11,147,-12,17,-14,18,-13,146});
    states[13] = new State(-12);
    states[14] = new State(new int[]{24,15,9,144,10,145,11,-19,21,-19,22,-19,4,-19,12,-19},new int[]{-11,16,-12,17,-14,18,-13,146});
    states[15] = new State(-13);
    states[16] = new State(-15);
    states[17] = new State(-16);
    states[18] = new State(new int[]{11,143,21,-22,22,-22,4,-22,12,-22},new int[]{-15,19});
    states[19] = new State(new int[]{21,127,22,129,4,132,12,142},new int[]{-16,20,-17,23});
    states[20] = new State(new int[]{4,21});
    states[21] = new State(new int[]{31,22});
    states[22] = new State(-18);
    states[23] = new State(new int[]{4,24});
    states[24] = new State(new int[]{25,133},new int[]{-18,25});
    states[25] = new State(new int[]{23,27},new int[]{-19,26});
    states[26] = new State(-24);
    states[27] = new State(new int[]{21,127,22,129,4,132},new int[]{-22,28,-24,131,-16,124});
    states[28] = new State(new int[]{4,120,13,83,15,91,17,97,18,103,23,107,21,127,22,129},new int[]{-23,29,-24,119,-25,111,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106,-16,124});
    states[29] = new State(new int[]{24,30,4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-25,31,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[30] = new State(-32);
    states[31] = new State(-37);
    states[32] = new State(-38);
    states[33] = new State(new int[]{32,34});
    states[34] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,35,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[35] = new State(new int[]{31,36});
    states[36] = new State(-45);
    states[37] = new State(new int[]{37,42,38,43,31,-72,28,-72,26,-72,29,-72,33,-72,34,-72,35,-72,36,-72,16,-72},new int[]{-39,38,-40,39});
    states[38] = new State(-68);
    states[39] = new State(new int[]{5,51,4,59,19,60,20,61},new int[]{-38,40,-41,44,-33,52,-7,53});
    states[40] = new State(new int[]{37,42,38,43,31,-72,28,-72,26,-72,29,-72,33,-72,34,-72,35,-72,36,-72,16,-72},new int[]{-39,41,-40,39});
    states[41] = new State(-73);
    states[42] = new State(-70);
    states[43] = new State(-71);
    states[44] = new State(new int[]{39,49,40,50,37,-75,38,-75,31,-75,28,-75,26,-75,29,-75,33,-75,34,-75,35,-75,36,-75,16,-75},new int[]{-42,45,-43,46});
    states[45] = new State(-74);
    states[46] = new State(new int[]{5,51,4,59,19,60,20,61},new int[]{-41,47,-33,52,-7,53});
    states[47] = new State(new int[]{39,49,40,50,37,-75,38,-75,31,-75,28,-75,26,-75,29,-75,33,-75,34,-75,35,-75,36,-75,16,-75},new int[]{-42,48,-43,46});
    states[48] = new State(-76);
    states[49] = new State(-77);
    states[50] = new State(-78);
    states[51] = new State(-79);
    states[52] = new State(-80);
    states[53] = new State(new int[]{30,54,27,56,39,-46,40,-46,37,-46,38,-46,31,-46,28,-46,26,-46,29,-46,33,-46,34,-46,35,-46,36,-46,16,-46});
    states[54] = new State(new int[]{4,55});
    states[55] = new State(-49);
    states[56] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,57,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[57] = new State(new int[]{28,58});
    states[58] = new State(-47);
    states[59] = new State(-48);
    states[60] = new State(-81);
    states[61] = new State(new int[]{21,69,22,70,4,71},new int[]{-44,62});
    states[62] = new State(new int[]{27,63,39,-82,40,-82,37,-82,38,-82,31,-82,28,-82,26,-82,29,-82,33,-82,34,-82,35,-82,36,-82,16,-82});
    states[63] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,64,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[64] = new State(new int[]{28,65});
    states[65] = new State(-83);
    states[66] = new State(new int[]{5,51,4,59,19,60,20,61},new int[]{-38,67,-41,44,-33,52,-7,53});
    states[67] = new State(new int[]{37,42,38,43,31,-72,28,-72,26,-72,29,-72,33,-72,34,-72,35,-72,36,-72,16,-72},new int[]{-39,68,-40,39});
    states[68] = new State(-69);
    states[69] = new State(-84);
    states[70] = new State(-85);
    states[71] = new State(-86);
    states[72] = new State(new int[]{30,54,27,56,25,73,32,-46});
    states[73] = new State(new int[]{26,74,5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-36,76,-34,81,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[74] = new State(new int[]{31,75});
    states[75] = new State(-55);
    states[76] = new State(new int[]{26,77,29,79});
    states[77] = new State(new int[]{31,78});
    states[78] = new State(-56);
    states[79] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,80,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[80] = new State(-58);
    states[81] = new State(-57);
    states[82] = new State(-39);
    states[83] = new State(new int[]{25,84});
    states[84] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-35,85,-34,112,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[85] = new State(new int[]{26,86});
    states[86] = new State(new int[]{4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-25,87,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[87] = new State(new int[]{14,88,24,-50,4,-50,13,-50,15,-50,17,-50,18,-50,23,-50,31,-50});
    states[88] = new State(new int[]{4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-25,89,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[89] = new State(-51);
    states[90] = new State(-40);
    states[91] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-35,92,-34,112,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[92] = new State(new int[]{16,93});
    states[93] = new State(new int[]{4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-25,94,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[94] = new State(new int[]{31,95});
    states[95] = new State(-52);
    states[96] = new State(-41);
    states[97] = new State(new int[]{31,98,5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,99,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[98] = new State(-53);
    states[99] = new State(new int[]{31,100});
    states[100] = new State(-54);
    states[101] = new State(-42);
    states[102] = new State(-43);
    states[103] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,104,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[104] = new State(new int[]{31,105});
    states[105] = new State(-59);
    states[106] = new State(-44);
    states[107] = new State(new int[]{24,108,4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-23,109,-25,111,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[108] = new State(-60);
    states[109] = new State(new int[]{24,110,4,59,13,83,15,91,17,97,18,103,23,107},new int[]{-25,31,-26,32,-33,33,-7,72,-27,82,-28,90,-29,96,-30,101,-31,102,-32,106});
    states[110] = new State(-61);
    states[111] = new State(-36);
    states[112] = new State(new int[]{33,115,34,116,35,117,36,118,26,-62,16,-62},new int[]{-37,113});
    states[113] = new State(new int[]{5,51,4,59,19,60,20,61,37,42,38,43},new int[]{-34,114,-38,37,-41,44,-33,52,-7,53,-40,66});
    states[114] = new State(-63);
    states[115] = new State(-64);
    states[116] = new State(-65);
    states[117] = new State(-66);
    states[118] = new State(-67);
    states[119] = new State(-34);
    states[120] = new State(new int[]{27,122,30,-48,25,-48,32,-48,4,-90},new int[]{-45,121});
    states[121] = new State(-89);
    states[122] = new State(new int[]{28,123});
    states[123] = new State(-91);
    states[124] = new State(new int[]{4,125});
    states[125] = new State(new int[]{31,126});
    states[126] = new State(-35);
    states[127] = new State(new int[]{27,122,4,-90},new int[]{-45,128});
    states[128] = new State(-87);
    states[129] = new State(new int[]{27,122,4,-90},new int[]{-45,130});
    states[130] = new State(-88);
    states[131] = new State(-33);
    states[132] = new State(new int[]{27,122,4,-90},new int[]{-45,121});
    states[133] = new State(new int[]{26,134,21,127,22,129,4,132},new int[]{-20,135,-21,141,-16,139});
    states[134] = new State(-25);
    states[135] = new State(new int[]{26,136,29,137});
    states[136] = new State(-26);
    states[137] = new State(new int[]{21,127,22,129,4,132},new int[]{-21,138,-16,139});
    states[138] = new State(-28);
    states[139] = new State(new int[]{4,140});
    states[140] = new State(-29);
    states[141] = new State(-27);
    states[142] = new State(-31);
    states[143] = new State(-23);
    states[144] = new State(-20);
    states[145] = new State(-21);
    states[146] = new State(-17);
    states[147] = new State(-14);
    states[148] = new State(new int[]{4,149});
    states[149] = new State(-11);
    states[150] = new State(new int[]{7,151});
    states[151] = new State(new int[]{4,59},new int[]{-7,152});
    states[152] = new State(new int[]{30,54,8,148,31,-10},new int[]{-8,153});
    states[153] = new State(new int[]{31,154});
    states[154] = new State(new int[]{23,12},new int[]{-9,155});
    states[155] = new State(-9);
    states[156] = new State(new int[]{6,158,7,-3,10,-3,3,-3},new int[]{-3,157,-5,156});
    states[157] = new State(-4);
    states[158] = new State(new int[]{4,159});
    states[159] = new State(new int[]{31,160});
    states[160] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-5,-3});
    rules[5] = new Rule(-5, new int[]{6,4,31});
    rules[6] = new Rule(-4, new int[]{});
    rules[7] = new Rule(-4, new int[]{-6,-4});
    rules[8] = new Rule(-6, new int[]{7,-7,-8,31,-9});
    rules[9] = new Rule(-6, new int[]{10,7,-7,-8,31,-9});
    rules[10] = new Rule(-8, new int[]{});
    rules[11] = new Rule(-8, new int[]{8,4});
    rules[12] = new Rule(-9, new int[]{23,24});
    rules[13] = new Rule(-9, new int[]{23,-10,24});
    rules[14] = new Rule(-10, new int[]{-11});
    rules[15] = new Rule(-10, new int[]{-10,-11});
    rules[16] = new Rule(-11, new int[]{-12});
    rules[17] = new Rule(-11, new int[]{-13});
    rules[18] = new Rule(-12, new int[]{-14,-15,-16,4,31});
    rules[19] = new Rule(-14, new int[]{});
    rules[20] = new Rule(-14, new int[]{9});
    rules[21] = new Rule(-14, new int[]{10});
    rules[22] = new Rule(-15, new int[]{});
    rules[23] = new Rule(-15, new int[]{11});
    rules[24] = new Rule(-13, new int[]{-14,-15,-17,4,-18,-19});
    rules[25] = new Rule(-18, new int[]{25,26});
    rules[26] = new Rule(-18, new int[]{25,-20,26});
    rules[27] = new Rule(-20, new int[]{-21});
    rules[28] = new Rule(-20, new int[]{-20,29,-21});
    rules[29] = new Rule(-21, new int[]{-16,4});
    rules[30] = new Rule(-17, new int[]{-16});
    rules[31] = new Rule(-17, new int[]{12});
    rules[32] = new Rule(-19, new int[]{23,-22,-23,24});
    rules[33] = new Rule(-22, new int[]{-24});
    rules[34] = new Rule(-22, new int[]{-22,-24});
    rules[35] = new Rule(-24, new int[]{-16,4,31});
    rules[36] = new Rule(-23, new int[]{-25});
    rules[37] = new Rule(-23, new int[]{-23,-25});
    rules[38] = new Rule(-25, new int[]{-26});
    rules[39] = new Rule(-25, new int[]{-27});
    rules[40] = new Rule(-25, new int[]{-28});
    rules[41] = new Rule(-25, new int[]{-29});
    rules[42] = new Rule(-25, new int[]{-30});
    rules[43] = new Rule(-25, new int[]{-31});
    rules[44] = new Rule(-25, new int[]{-32});
    rules[45] = new Rule(-26, new int[]{-33,32,-34,31});
    rules[46] = new Rule(-33, new int[]{-7});
    rules[47] = new Rule(-33, new int[]{-7,27,-34,28});
    rules[48] = new Rule(-7, new int[]{4});
    rules[49] = new Rule(-7, new int[]{-7,30,4});
    rules[50] = new Rule(-27, new int[]{13,25,-35,26,-25});
    rules[51] = new Rule(-27, new int[]{13,25,-35,26,-25,14,-25});
    rules[52] = new Rule(-28, new int[]{15,-35,16,-25,31});
    rules[53] = new Rule(-29, new int[]{17,31});
    rules[54] = new Rule(-29, new int[]{17,-34,31});
    rules[55] = new Rule(-30, new int[]{-7,25,26,31});
    rules[56] = new Rule(-30, new int[]{-7,25,-36,26,31});
    rules[57] = new Rule(-36, new int[]{-34});
    rules[58] = new Rule(-36, new int[]{-36,29,-34});
    rules[59] = new Rule(-31, new int[]{18,-34,31});
    rules[60] = new Rule(-32, new int[]{23,24});
    rules[61] = new Rule(-32, new int[]{23,-23,24});
    rules[62] = new Rule(-35, new int[]{-34});
    rules[63] = new Rule(-35, new int[]{-34,-37,-34});
    rules[64] = new Rule(-37, new int[]{33});
    rules[65] = new Rule(-37, new int[]{34});
    rules[66] = new Rule(-37, new int[]{35});
    rules[67] = new Rule(-37, new int[]{36});
    rules[68] = new Rule(-34, new int[]{-38,-39});
    rules[69] = new Rule(-34, new int[]{-40,-38,-39});
    rules[70] = new Rule(-40, new int[]{37});
    rules[71] = new Rule(-40, new int[]{38});
    rules[72] = new Rule(-39, new int[]{});
    rules[73] = new Rule(-39, new int[]{-40,-38,-39});
    rules[74] = new Rule(-38, new int[]{-41,-42});
    rules[75] = new Rule(-42, new int[]{});
    rules[76] = new Rule(-42, new int[]{-43,-41,-42});
    rules[77] = new Rule(-43, new int[]{39});
    rules[78] = new Rule(-43, new int[]{40});
    rules[79] = new Rule(-41, new int[]{5});
    rules[80] = new Rule(-41, new int[]{-33});
    rules[81] = new Rule(-41, new int[]{19});
    rules[82] = new Rule(-41, new int[]{20,-44});
    rules[83] = new Rule(-41, new int[]{20,-44,27,-34,28});
    rules[84] = new Rule(-44, new int[]{21});
    rules[85] = new Rule(-44, new int[]{22});
    rules[86] = new Rule(-44, new int[]{4});
    rules[87] = new Rule(-16, new int[]{21,-45});
    rules[88] = new Rule(-16, new int[]{22,-45});
    rules[89] = new Rule(-16, new int[]{4,-45});
    rules[90] = new Rule(-45, new int[]{});
    rules[91] = new Rule(-45, new int[]{27,28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 5: // Import -> IMPORT, IDENTIFIER, SEMICOLON
{Root.Imports.Add(new Identifier(ValueStack[ValueStack.Depth-2].identifier));}
        break;
      case 8: // ClassDeclaration -> CLASS, CompoundName, Extension, SEMICOLON, ClassBody
{ Console.WriteLine(ValueStack[ValueStack.Depth-4].identifier); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
